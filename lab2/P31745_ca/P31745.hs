------------------------------------------------------------------------------------
------------------------------------- FLATTEN --------------------------------------
------------------------------------------------------------------------------------
flatten :: [[Int]] -> [Int]
flatten array = foldr (++) [] array

------------------------------------------------------------------------------------
------------------------------------- MYLENGTH -------------------------------------
------------------------------------------------------------------------------------
myLength :: String -> Int
myLength text = sum $ map (const 1) text

------------------------------------------------------------------------------------
------------------------------------- MYREVERSE ------------------------------------
------------------------------------------------------------------------------------
myReverse :: [Int] -> [Int]
myReverse array = foldl (flip (:)) [] array

------------------------------------------------------------------------------------
-------------------------------------- COUNTIN -------------------------------------
------------------------------------------------------------------------------------
countIn :: [[Int]] -> Int -> [Int]
countIn l x = map (length) $ map (filter (== x)) l

------------------------------------------------------------------------------------
------------------------------------- FIRSTWORD ------------------------------------
------------------------------------------------------------------------------------
firstWord :: String -> String
firstWord text = takeWhile (/= ' ') $ dropWhile (== ' ') text