------------------------------------------------------------------------------------
------------------------------------- myFoldl --------------------------------------
------------------------------------------------------------------------------------
myFoldl :: (a -> b -> a) -> a -> [b] -> a
myFoldl _ a [] = a
myFoldl f a (b:bs) = myFoldl f (f a b) bs

------------------------------------------------------------------------------------
------------------------------------- myFoldr --------------------------------------
------------------------------------------------------------------------------------
myFoldr :: (a -> b -> b) -> b -> [a] -> b
myFoldr _ b [] = b
myFoldr f b (a:as) = f a (myFoldr f b as)

------------------------------------------------------------------------------------
------------------------------------ myIterate -------------------------------------
------------------------------------------------------------------------------------
myIterate :: (a -> a) -> a -> [a]
myIterate f a = a : myIterate f (f a)

------------------------------------------------------------------------------------
------------------------------------- myUntil --------------------------------------
------------------------------------------------------------------------------------
myUntil :: (a -> Bool) -> (a -> a) -> a -> a
myUntil b f a = head (filter b (myIterate f a))

------------------------------------------------------------------------------------
-------------------------------------- myMap ---------------------------------------
------------------------------------------------------------------------------------
myMap :: (a -> b) -> [a] -> [b]
myMap f as = [ f b | b <- as ]

------------------------------------------------------------------------------------
------------------------------------- myFilter -------------------------------------
------------------------------------------------------------------------------------
myFilter :: (a -> Bool) -> [a] -> [a]
myFilter f as = [ a | a <- as, f a ]

------------------------------------------------------------------------------------
-------------------------------------- myAll ---------------------------------------
------------------------------------------------------------------------------------
myAll :: (a -> Bool) -> [a] -> Bool
myAll f list = and (map f list)

------------------------------------------------------------------------------------
-------------------------------------- myAny ---------------------------------------
------------------------------------------------------------------------------------
myAny :: (a -> Bool) -> [a] -> Bool
myAny f list = or (map f list)

------------------------------------------------------------------------------------
-------------------------------------- myZip ---------------------------------------
------------------------------------------------------------------------------------
myZip :: [a] -> [b] -> [(a, b)]
myZip _ [] = []
myZip [] _ = []
myZip (a:as) (b:bs) = (a, b) : myZip as bs

------------------------------------------------------------------------------------
------------------------------------ myZipWith -------------------------------------
------------------------------------------------------------------------------------
myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
myZipWith func l1 l2 = [ func x y | (x, y) <- zip l1 l2 ]

